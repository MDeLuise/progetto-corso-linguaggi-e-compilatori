-- -*- haskell -*-
-- This Alex file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns #-}
{-# OPTIONS_GHC -w #-}
module LexGrammar where



import qualified Data.Bits
import Data.Word (Word8)
import Data.Char (ord)
}


$l = [a-zA-Z\192 - \255] # [\215 \247]    -- isolatin1 letter FIXME
$c = [A-Z\192-\221] # [\215]    -- capital isolatin1 letter FIXME
$s = [a-z\222-\255] # [\247]    -- small isolatin1 letter FIXME
$d = [0-9]                -- digit
$i = [$l $d _ ']          -- identifier character
$u = [\0-\255]          -- universal: any character

-- Added NOT by bnfc
$w = [\t\ ]            -- characters to skip
-- .

@rsyms =    -- symbols and non-identifier-like reserved words
   \10 | \; | \, | \( | \) | \| \| | \& \& | \! | \= \= | \! \= | \< | \< \= | \> | \> \= | \+ | \- | \* | \/ | \% | \* \* | \& | \` | \? | \^ | \~ | \+ \+ | \- \- | \[ | \] | \: | \: \= | \. \. | \{ | \_ | \} | \* \= | \+ \= | \/ \= | \- \= | \* \* \= | \& \= | \| \=

:-
"#" [.]* ; -- Toss single line comments
"/*" ([$u # \*] | \*+ [$u # [\* \/]])* ("*")+ "/" ;


-- Added NOT by bnfc
$w+ ; -- skip unuseful characters
\n / \n ; -- "merge" multiple new line character
\r {\x y -> PT x (TS "\n" newLineId)} -- for Windows and Mac Classic compatibility
\; {\x y -> PT x (TL " ")} -- for catching ";" character from input and send the error to Happy
-- .

@rsyms { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }

$l $i*   { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }
\" ([$u # [\" \\ \n]] | (\\ (\" | \\ | \' | n | t)))* \"{ tok (\p s -> PT p (TL $ share $ unescapeInitTail s)) }
\' ($u # [\' \\] | \\ [\\ \' n t]) \'  { tok (\p s -> PT p (TC $ share s))  }
$d+      { tok (\p s -> PT p (TI $ share s))    }
$d+ \. $d+ (e (\-)? $d+)? { tok (\p s -> PT p (TD $ share s)) }

{

tok :: (Posn -> String -> Token) -> (Posn -> String -> Token)
tok f p s = f p s

share :: String -> String
share = id

data Tok =
   TS !String !Int    -- reserved words and symbols
 | TL !String         -- string literals
 | TI !String         -- integer literals
 | TV !String         -- identifiers
 | TD !String         -- double precision float literals
 | TC !String         -- character literals

 deriving (Eq,Show,Ord)

data Token =
   PT  Posn Tok
 | Err Posn
  deriving (Eq,Show,Ord)

tokenPos :: [Token] -> String
tokenPos (PT (Pn _ l c) _ :_) = "line " ++ show l ++ " column " ++ show c
tokenPos (Err (Pn _ l c) :_) = "line " ++ show l ++ " column " ++ show c
tokenPos _ = "end of file"

tokenPosn :: Token -> Posn
tokenPosn (PT p _) = p
tokenPosn (Err p) = p

tokenLineCol :: Token -> (Int, Int)
tokenLineCol = posLineCol . tokenPosn

posLineCol :: Posn -> (Int, Int)
posLineCol (Pn _ l c) = (l,c)

mkPosToken :: Token -> ((Int, Int), String)
mkPosToken t@(PT p _) = (posLineCol p, prToken t)

prToken :: Token -> String
prToken t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> show s
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s


data BTree = N | B String Tok BTree BTree deriving (Show)

eitherResIdent :: (String -> Tok) -> String -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) | s < a  = treeFind left
                              | s > a  = treeFind right
                              | s == a = t

resWords :: BTree
resWords = b "]" 35 (b "-" 18 (b ")" 9 (b "&" 5 (b "!=" 3 (b "!" 2 (b "\n" 1 N N) N) (b "%" 4 N N)) (b "&=" 7 (b "&&" 6 N N) (b "(" 8 N N))) (b "+" 14 (b "**=" 12 (b "**" 11 (b "*" 10 N N) N) (b "*=" 13 N N)) (b "+=" 16 (b "++" 15 N N) (b "," 17 N N)))) (b "<" 27 (b "/=" 23 (b ".." 21 (b "-=" 20 (b "--" 19 N N) N) (b "/" 22 N N)) (b ":=" 25 (b ":" 24 N N) (b ";" 26 N N))) (b ">=" 31 (b "==" 29 (b "<=" 28 N N) (b ">" 30 N N)) (b "String" 33 (b "?" 32 N N) (b "[" 34 N N))))) (b "in" 52 (b "continue" 44 (b "break" 40 (b "`" 38 (b "_" 37 (b "^" 36 N N) N) (b "boolean" 39 N N)) (b "checked" 42 (b "char" 41 N N) (b "const" 43 N N))) (b "false" 48 (b "do" 46 (b "def" 45 N N) (b "else" 47 N N)) (b "for" 50 (b "float64" 49 N N) (b "if" 51 N N)))) (b "var" 61 (b "switch" 57 (b "ref" 55 (b "match" 54 (b "int" 53 N N) N) (b "return" 56 N N)) (b "val" 59 (b "true" 58 N N) (b "valres" 60 N N))) (b "|=" 65 (b "while" 63 (b "void" 62 N N) (b "{" 64 N N)) (b "}" 67 (b "||" 66 N N) (b "~" 68 N N)))))
   where b s n = let bs = id s
                  in B bs (TS bs n)

unescapeInitTail :: String -> String
unescapeInitTail = id . unesc . tail . id where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '"':[]    -> []
    c:cs      -> c : unesc cs
    _         -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn {getPosAbsolute:: !Int, getPosRow:: !Int, getPosColumn:: !Int}
      deriving (Eq, Ord, Read)


instance Show Posn where
  show (Pn ab ro co) = "line " ++ (show ro) ++ ", column " ++ (show co)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  String)   -- current input string



-- Added NOT by bnfc
semicolonId = 26
newLineId = 1

preProcessing :: [Token] -> Integer -> Integer -> [Token]
preProcessing [] _ _ = []
preProcessing (t:ts) cu sq = case t of
  Err _ -> (t:ts)
  PT (Pn _ _ _) (TS "\n" _) -> preProcessing ts cu sq
  PT (Pn _ _ _) (TS "}" _) -> t:(afterCurly ts cu sq)
  PT (Pn _ _ _) (TS "(" _) -> t:(preProcessing ts (cu + 1) sq)
  PT (Pn _ _ _) (TS ")" _) -> t:(preProcNewline ts (cu - 1) sq)
  PT (Pn _ _ _) (TS "[" _) -> t:(preProcessing ts cu (sq + 1))
  PT (Pn _ _ _) (TS "]" _) -> t:(preProcNewline ts cu (sq - 1))
  PT (Pn _ _ _) (TS tok _) -> t:(considerNewline tok ts cu sq)
  PT (Pn _ _ _) (TC tok ) -> t:(considerNewline tok ts cu sq)
  PT (Pn _ _ _) (TL tok ) -> t:(considerNewline tok ts cu sq)
  PT (Pn _ _ _) (TI tok ) -> t:(considerNewline tok ts cu sq)
  PT (Pn _ _ _) (TV tok ) -> t:(considerNewline tok ts cu sq)
  PT (Pn _ _ _) (TD tok ) -> t:(considerNewline tok ts cu sq)
  
afterCurly :: [Token] -> Integer -> Integer -> [Token]
afterCurly [] _ _ = (PT (Pn 0 0 0) (TS ";" semicolonId)):[]
afterCurly (t:ts) cu sq = case t of
  Err _ -> (t:ts)
  PT (Pn cha row col) (TS "\n" _) -> (PT (Pn cha row col) (TS ";" semicolonId)):(preProcessing ts cu sq)
  PT _ _ -> preProcessing (t:ts) cu sq
  
preProcNewline :: [Token] -> Integer -> Integer -> [Token]
preProcNewline [] _ _ = []
preProcNewline (t:ts) 0 0 = case t of
  Err _ -> (t:ts)
  PT (Pn cha row col) (TS "\n" _) -> (PT (Pn cha row col) (TS ";" semicolonId)):(preProcessing ts 0 0)
  PT _ _ -> preProcessing (t:ts) 0 0
  
preProcNewline (t:ts) cu sq = case t of
  Err _ -> (t:ts)
  PT (Pn cha row col) (TS "\n" _) -> (preProcessing ts cu sq)
  PT _ _ -> preProcessing (t:ts) cu sq
  
considerNewline :: String -> [Token] -> Integer -> Integer -> [Token]
considerNewline tok ts cu sq = case tok of
  "~" -> (preProcessing ts cu sq)
  "+" -> (preProcessing ts cu sq)
  "-" -> (preProcessing ts cu sq)
  "*" -> (preProcessing ts cu sq)
  "/" -> (preProcessing ts cu sq)
  "%" -> (preProcessing ts cu sq)
  "**" -> (preProcessing ts cu sq)
  "&" -> (preProcessing ts cu sq)
  "||" -> (preProcessing ts cu sq)
  "&&" -> (preProcessing ts cu sq)
  "!" -> (preProcessing ts cu sq)
  "==" -> (preProcessing ts cu sq)
  "!=" -> (preProcessing ts cu sq)
  "<=" -> (preProcessing ts cu sq)
  ">=" -> (preProcessing ts cu sq)
  "<" -> (preProcessing ts cu sq)
  ">" -> (preProcessing ts cu sq)
  ":" -> (preProcessing ts cu sq)
  ":=" -> (preProcessing ts cu sq)
  "+=" -> (preProcessing ts cu sq)
  "-=" -> (preProcessing ts cu sq)
  "*=" -> (preProcessing ts cu sq)
  "/=" -> (preProcessing ts cu sq)
  "**=" -> (preProcessing ts cu sq)
  "&=" -> (preProcessing ts cu sq)
  "|=" -> (preProcessing ts cu sq)
  "{" -> (preProcessing ts cu sq)
  _ -> (preProcNewline ts cu sq)
  

tokens :: String -> [Token]
tokens str = preProcessing (go (alexStartPos, '\n', [], str)) 0 0
-- .
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (take len str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case  s of
    []  -> Nothing
    (c:s) ->
             let p'     = alexMove p c
                 (b:bs) = utf8Encode c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
 where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
}
