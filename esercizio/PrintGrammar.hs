{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintGrammar where

-- pretty-printer generated by the BNF converter

import AbsGrammar
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)



render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{" : "}"  :ts -> if ( ts==[] || (head ts)=="}")
                        then showChar '{' . new (i) . showChar '}' . new (i-1) . rend (i-1) ts
                        else showChar '{' . new (i) . showChar '}' . new (i) . rend (i) ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}"      :ts -> if (ts==[] || (head ts)=="}")
                       then showChar '}' . new (i-1) . rend (i-1) ts
                       else showChar '}' . new (i) . rend (i) ts
    t  : "," :ts -> showString t . space "," i . rend i ts
    t  : ")" : "}" :ts -> showString t . showChar ')' . showChar ' ' . new (i-1) . showChar '}' . rend (i-1) ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t  : "}" :ts -> if (ts==[] || (head ts)=="}")
                       then showString t . new(i-1) . showChar '}' . new (i-2) . rend (i-2) ts
                       else showString t . new(i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    t        :ts -> space t i . rend i ts 
    _            -> id 
  new i   = showChar '\n' . replicateS (i*2) (showChar ' ') . dropWhile isSpace
  new2 i   = replicateS (i*2) (showChar ' ') . dropWhile isSpace
  space t i = if t== "\n" then new i else showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)


instance Print a => Print [a] where
  prt = prtList
 
instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')


mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print (Ident attr) where
  prt _ (Ident _ i) = doc (showString (i))


instance Print (Boolean attr) where
  prt i e = case e of
    Boolean_true _ -> prPrec i 0 (concatD [doc (showString "true")])
    Boolean_false _ -> prPrec i 0 (concatD [doc (showString "false")])

instance Print (BasicType attr) where
  prt i e = case e of
    BasicType_boolean _ -> prPrec i 0 (concatD [doc (showString "boolean")])
    BasicType_char _ -> prPrec i 0 (concatD [doc (showString "char")])
    BasicType_float64 _ -> prPrec i 0 (concatD [doc (showString "float64")])
    BasicType_int _ -> prPrec i 0 (concatD [doc (showString "int")])
    BasicType_void _ -> prPrec i 0 (concatD [doc (showString "void")])
    BasicType_String _ -> prPrec i 0 (concatD [doc (showString "String")])

instance Print Modality where
  prt i e = case e of
    Modality1 -> prPrec i 0 (concatD [])
    Modality_val -> prPrec i 0 (concatD [doc (showString "val")])
    Modality_ref -> prPrec i 0 (concatD [doc (showString "ref")])
    Modality_valres -> prPrec i 0 (concatD [doc (showString "valres")])
    Modality_const -> prPrec i 0 (concatD [doc (showString "const")])

instance Print NewLine where
  prt i e = case e of
    NewLine1 -> prPrec i 0 (concatD [doc (showString "\n")])

instance Print (Program attr) where
  prt i e = case e of
    Prog _ blockdecl -> prPrec i 0 (concatD [prt 0 blockdecl])

instance Print (RExpr attr) where
  prt i e = case e of
    BoolBinOp _ _ Or rexpr1 rexpr2 -> prPrec i 0 (concatD [prt 0 rexpr1, doc (showString "||"), prt 1 rexpr2])
    BoolBinOp _ _ And rexpr1 rexpr2 -> prPrec i 1 (concatD [prt 1 rexpr1, doc (showString "&&"), prt 2 rexpr2])
    Not _ _ rexpr -> prPrec i 2 (concatD [doc (showString "!"), prt 3 rexpr])
    Equality _ _ Eq rexpr1 rexpr2 -> prPrec i 5 (concatD [prt 6 rexpr1, doc (showString "=="), prt 6 rexpr2])
    Equality _ _ Neq rexpr1 rexpr2 -> prPrec i 5 (concatD [prt 6 rexpr1, doc (showString "!="), prt 6 rexpr2])
    Comparison _ _ Lt rexpr1 rexpr2 -> prPrec i 5 (concatD [prt 6 rexpr1, doc (showString "<"), prt 6 rexpr2])
    Comparison _ _ LtE rexpr1 rexpr2 -> prPrec i 5 (concatD [prt 6 rexpr1, doc (showString "<="), prt 6 rexpr2])
    Comparison _ _ Gt rexpr1 rexpr2 -> prPrec i 5 (concatD [prt 6 rexpr1, doc (showString ">"), prt 6 rexpr2])
    Comparison _ _ GtE rexpr1 rexpr2 -> prPrec i 5 (concatD [prt 6 rexpr1, doc (showString ">="), prt 6 rexpr2])
    BinOp _ _ Add rexpr1 rexpr2 -> prPrec i 7 (concatD [prt 7 rexpr1, doc (showString "+"), prt 8 rexpr2])
    BinOp _ _ Sub rexpr1 rexpr2 -> prPrec i 7 (concatD [prt 7 rexpr1, doc (showString "-"), prt 8 rexpr2])
    BinOp _ _ Mul rexpr1 rexpr2 -> prPrec i 8 (concatD [prt 8 rexpr1, doc (showString "*"), prt 9 rexpr2])
    BinOp _ _ Div rexpr1 rexpr2 -> prPrec i 8 (concatD [prt 8 rexpr1, doc (showString "/"), prt 9 rexpr2])
    BinOp _ _ Mod rexpr1 rexpr2 -> prPrec i 8 (concatD [prt 8 rexpr1, doc (showString "%"), prt 9 rexpr2])
    BinOp _ _ Pow rexpr1 rexpr2 -> prPrec i 9 (concatD [prt 10 rexpr1, doc (showString "**"), prt 9 rexpr2])
    Neg _ _ rexpr -> prPrec i 11 (concatD [doc (showString "-"), prt 12 rexpr])
    Ref _ _ lexpr -> prPrec i 11 (concatD [doc (showString "&"), prt 0 lexpr])
    FCall _ _ id rexprs -> prPrec i 12 (concatD [prt 0 id, doc (showString "("), prt 0 rexprs, doc (showString ")")])
    Int _ _ n -> prPrec i 13 (concatD [prt 0 (myIntegerInt n)])
    Char _ _ c -> prPrec i 13 (concatD [prt 0 (myCharChar c)])
    String _ _ str -> prPrec i 13 (concatD [prt 0 (myStringString str)])
    Float _ _ d -> prPrec i 13 (concatD [prt 0 (myDoubleDouble d)])
    Bool _ _ boolean -> prPrec i 13 (concatD [prt 0 boolean])
    Lexpr _ _ lexpr -> prPrec i 14 (concatD [prt 0 lexpr])
    IfRe _ _ rexpr1 rexpr2 rexpr3 -> prPrec i 0 (concatD [doc (showString "`"), prt 0 rexpr1, doc (showString "`"), doc (showString "?"), doc (showString "`"), prt 0 rexpr2, doc (showString "`"), doc (showString "^"), doc (showString "`"), prt 0 rexpr3, doc (showString "`")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (LExpr attr) where
  prt i e = case e of
    Deref _ _ rexpr -> prPrec i 0 (concatD [doc (showString "~"), prt 0 rexpr,  doc (showChar '\n')])
    IncDec _ _ PreInc lexpr -> prPrec i 0 (concatD [doc (showString "++"), prt 1 lexpr,  doc (showChar '\n')])
    IncDec _ _ PreDecr lexpr -> prPrec i 0 (concatD [doc (showString "--"), prt 1 lexpr,  doc (showChar '\n')])
    IncDec _ _ PostInc lexpr -> prPrec i 1 (concatD [prt 2 lexpr, doc (showString "++"), doc (showChar '\n')])
    IncDec _ _ PostDecr lexpr -> prPrec i 1 (concatD [prt 2 lexpr, doc (showString "--"),  doc (showChar '\n')])
    BasLExpr _ _ blexpr -> prPrec i 2 (concatD [prt 0 blexpr])

instance Print (BLExpr attr) where
  prt i e = case e of
    ArrayEl _ _ _ blexpr rexpr -> prPrec i 0 (concatD [prt 0 blexpr, doc (showString "["), prt 0 rexpr, doc (showString "]")])
    Id _ _ _ str -> prPrec i 0 (concatD [(doc (showString str))])
    ParLExpr _ _ _ str -> prPrec i 0 (concatD[doc (showString "("), (prt 0 str),doc (showString ")")])

instance Print (TypeSpec attr) where
  prt i e = case e of
    BasTyp _ basictype -> prPrec i 0 (concatD [prt 0 basictype])
    ArrDef _ typespec n -> prPrec i 0 (concatD [prt 0 typespec, doc (showString "["), prt 0 (myIntegerInt n), doc (showString "]")])
    ArrUnDef _ typespec -> prPrec i 0 (concatD [prt 0 typespec, doc (showString "["), doc (showString "]")])
    Pointer _ typespec -> prPrec i 0 (concatD [prt 0 typespec, doc (showString "~")])

instance Print (VarDeclInit attr) where
  prt i e = case e of
    VarDeclIn _ _ id typespec complexrexpr bo -> prPrec i 0 (concatD [doc (showString (if bo then "checked" else "")), doc (showString "var"), prt 0 id, doc (showString ":"), prt 0 typespec, doc (showString ":="), prt 0 complexrexpr, doc (showChar '\n')])
    ConDeclIn _ _ id typespec complexrexpr bo -> prPrec i 0 (concatD [doc (showString (if bo then "checked" else "")), doc (showString "def"), prt 0 id, doc (showString ":"), prt 0 typespec, doc (showString ":="), prt 0 complexrexpr, doc (showChar '\n')])
    
instance Print (ComplexRExpr attr) where
  prt i e = case e of
    Simple _ _ rexpr -> prPrec i 0 (concatD [prt 0 rexpr])
    Array _ _ complexrexprs -> prPrec i 0 (concatD [doc (showString "["), prt 0 complexrexprs, doc (showString "]")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (Parameter attr) where
  prt i e = case e of
    Param _ _ modality id typespec -> prPrec i 0 (concatD [prt 0 modality, prt 0 id, doc (showString ":"), prt 0 typespec])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (Stmt attr) where
  prt i e = case e of
    Comp _ blockdecl -> prPrec i 0 (concatD [prt 0 blockdecl])
    ProcCall _ id rexprs -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 rexprs, doc (showString ")"), doc (showChar '\n')])
    Jmp _ jumpstmt -> prPrec i 0 (concatD [prt 0 jumpstmt])
    While _ rexpr blockdecl -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 rexpr, doc (showString ")"), prt 0 blockdecl])
    DoWhile _ rexpr blockdecl -> prPrec i 0 (concatD [doc (showString "do"), prt 0 blockdecl, doc (showString "while"), doc (showString "("), prt 0 rexpr, doc (showString ")"), doc (showString "\n")])
    For _ id rexpr1 rexpr2 blockdecl-> prPrec i 0 (concatD [doc (showString "for"), prt 0 id, doc (showString "in"), prt 0 rexpr1, doc (showString ".."), prt 0 rexpr2, prt 0 blockdecl])
    Sel _ selectionstmt -> prPrec i 0 (concatD [prt 0 selectionstmt])
    Assgn _ lexpr assignmentop rexpr -> prPrec i 0 (concatD [prt 0 lexpr, prt 0 assignmentop, prt 0 rexpr, doc (showString "\n")])
    LExprStmt _ lexpr -> prPrec i 0 (concatD [prt 0 lexpr])
    VarDec _ vardeclinit -> prPrec i 0 (concatD [prt 0 vardeclinit])
    FunDec _ id parameters typespec blockdecl -> prPrec i 0 (concatD [doc (showString "def"), prt 0 id, doc (showString "("), prt 0 parameters, doc (showString ")"), doc (showString ":"), prt 0 typespec, prt 0 blockdecl])
    Switch _ rexpr switchblock -> prPrec i 0 (concatD [doc (showString "switch"), doc (showString "("), prt 0 rexpr, doc (showString ")"), prt 0 switchblock])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
  
instance Print (SwitchBlock attr) where
  prt i e = case e of
    BlockSwitch _ switchmatchs -> prPrec i 0 (concatD [doc (showString "{"), prt 0 switchmatchs, doc (showString "}")])  
  
instance Print (SwitchMatch attr) where
  prt i e = case e of
    Match _ rexpr blockdecl -> prPrec i 0 (concatD [doc (showString "match"), prt 0 rexpr, prt 0 blockdecl])
    Default _ blockdecl -> prPrec i 0 (concatD [doc (showString "match"), doc (showString "_"), prt 0 blockdecl])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])  
  
instance Print (BlockDecl attr) where
  prt i e = case e of
    Block _ stmts -> prPrec 0 0 (concatD [doc (showString "{"), prt 0 stmts, doc (showString "}")])

instance Print (Assignment_op a) where
  prt i e = case e of
    Assign _ -> prPrec i 0 (concatD [doc (showString ":=")])
    AssgnMul _ -> prPrec i 0 (concatD [doc (showString "*=")])
    AssgnAdd _ -> prPrec i 0 (concatD [doc (showString "+=")])
    AssgnDiv _ -> prPrec i 0 (concatD [doc (showString "/=")])
    AssgnSub _ -> prPrec i 0 (concatD [doc (showString "-=")])
    AssgnPow _ -> prPrec i 0 (concatD [doc (showString "**=")])
    AssgnAnd _ -> prPrec i 0 (concatD [doc (showString "&=")])
    AssgnOr _ -> prPrec i 0 (concatD [doc (showString "|=")])

instance Print (JumpStmt attr) where
  prt i e = case e of
    Break _ -> prPrec i 0 (concatD [doc (showString "break"), doc (showString "\n")])
    Continue _ -> prPrec i 0 (concatD [doc (showString "continue"), doc (showString "\n") ])
    RetExpVoid _ -> prPrec i 0 (concatD [doc (showString "return"), doc (showString "\n")])
    RetExp _ rexpr -> prPrec i 0 (concatD [doc (showString "return"), prt 0 rexpr, doc (showString "\n")])

instance Print (SelectionStmt attr) where
  prt i e = case e of
    IfNoElse _ rexpr blockdecl -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 rexpr, doc (showString ")"), prt 0 blockdecl ])
    IfElse _ rexpr blockdecl1 blockdecl2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 rexpr, doc (showString ")"), prt 0 blockdecl1, doc (showString "else"), prt 0 blockdecl2])


